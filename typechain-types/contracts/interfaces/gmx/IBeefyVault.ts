/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IBeefyVault {
  export type StratCandidateStruct = {
    implementation: PromiseOrValue<string>;
    proposedTime: PromiseOrValue<BigNumberish>;
  };

  export type StratCandidateStructOutput = [string, BigNumber] & {
    implementation: string;
    proposedTime: BigNumber;
  };
}

export interface IBeefyVaultInterface extends utils.Interface {
  functions: {
    "stratCandidate()": FunctionFragment;
    "strategy()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "stratCandidate" | "strategy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "stratCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "stratCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;

  events: {};
}

export interface IBeefyVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBeefyVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    stratCandidate(
      overrides?: CallOverrides
    ): Promise<[IBeefyVault.StratCandidateStructOutput]>;

    strategy(overrides?: CallOverrides): Promise<[string]>;
  };

  stratCandidate(
    overrides?: CallOverrides
  ): Promise<IBeefyVault.StratCandidateStructOutput>;

  strategy(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    stratCandidate(
      overrides?: CallOverrides
    ): Promise<IBeefyVault.StratCandidateStructOutput>;

    strategy(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    stratCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    strategy(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    stratCandidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategy(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
