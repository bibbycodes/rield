/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IGMXVaultInterface extends utils.Interface {
  functions: {
    "PRICE_PRECISION()": FunctionFragment;
    "adjustForDecimals(uint256,address,address)": FunctionFragment;
    "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "getMaxPrice(address)": FunctionFragment;
    "getRedemptionAmount(address,uint256)": FunctionFragment;
    "mintBurnFeeBasisPoints()": FunctionFragment;
    "taxBasisPoints()": FunctionFragment;
    "usdg()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRICE_PRECISION"
      | "adjustForDecimals"
      | "getFeeBasisPoints"
      | "getMaxPrice"
      | "getRedemptionAmount"
      | "mintBurnFeeBasisPoints"
      | "taxBasisPoints"
      | "usdg"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adjustForDecimals",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBasisPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBurnFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdg", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustForDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBurnFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdg", data: BytesLike): Result;

  events: {};
}

export interface IGMXVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGMXVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdg(overrides?: CallOverrides): Promise<[string]>;
  };

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  adjustForDecimals(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenDiv: PromiseOrValue<string>,
    _tokenMul: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdgDelta: PromiseOrValue<BigNumberish>,
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _increment: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionAmount(
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  usdg(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    usdg(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdg(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
