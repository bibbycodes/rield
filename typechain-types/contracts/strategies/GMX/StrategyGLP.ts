/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFeeConfig {
  export type FeeCategoryStruct = {
    total: PromiseOrValue<BigNumberish>;
    beefy: PromiseOrValue<BigNumberish>;
    call: PromiseOrValue<BigNumberish>;
    strategist: PromiseOrValue<BigNumberish>;
    label: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
  };

  export type FeeCategoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    total: BigNumber;
    beefy: BigNumber;
    call: BigNumber;
    strategist: BigNumber;
    label: string;
    active: boolean;
  };

  export type AllFeesStruct = {
    performance: IFeeConfig.FeeCategoryStruct;
    deposit: PromiseOrValue<BigNumberish>;
    withdraw: PromiseOrValue<BigNumberish>;
  };

  export type AllFeesStructOutput = [
    IFeeConfig.FeeCategoryStructOutput,
    BigNumber,
    BigNumber
  ] & {
    performance: IFeeConfig.FeeCategoryStructOutput;
    deposit: BigNumber;
    withdraw: BigNumber;
  };
}

export declare namespace StratFeeManagerInitializable {
  export type CommonAddressesStruct = {
    vault: PromiseOrValue<string>;
    unirouter: PromiseOrValue<string>;
    keeper: PromiseOrValue<string>;
    strategist: PromiseOrValue<string>;
    beefyFeeRecipient: PromiseOrValue<string>;
    beefyFeeConfig: PromiseOrValue<string>;
  };

  export type CommonAddressesStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    vault: string;
    unirouter: string;
    keeper: string;
    strategist: string;
    beefyFeeRecipient: string;
    beefyFeeConfig: string;
  };
}

export interface StrategyGLPInterface extends utils.Interface {
  functions: {
    "WITHDRAWAL_FEE_CAP()": FunctionFragment;
    "WITHDRAWAL_MAX()": FunctionFragment;
    "acceptTransfer()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "balanceOfPool()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "beefyFeeConfig()": FunctionFragment;
    "beefyFeeRecipient()": FunctionFragment;
    "beforeDeposit()": FunctionFragment;
    "callReward()": FunctionFragment;
    "chef()": FunctionFragment;
    "deposit()": FunctionFragment;
    "depositFee()": FunctionFragment;
    "getAllFees()": FunctionFragment;
    "getStratFeeId()": FunctionFragment;
    "glpManager()": FunctionFragment;
    "glpRewardStorage()": FunctionFragment;
    "gmxRewardStorage()": FunctionFragment;
    "gmxVault()": FunctionFragment;
    "harvest(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestOnDeposit()": FunctionFragment;
    "initialize(address,address,address,address,(address,address,address,address,address,address))": FunctionFragment;
    "keeper()": FunctionFragment;
    "lastHarvest()": FunctionFragment;
    "managerHarvest()": FunctionFragment;
    "minter()": FunctionFragment;
    "native()": FunctionFragment;
    "owner()": FunctionFragment;
    "panic()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retireStrat()": FunctionFragment;
    "rewardsAvailable()": FunctionFragment;
    "setBeefyFeeConfig(address)": FunctionFragment;
    "setBeefyFeeRecipient(address)": FunctionFragment;
    "setHarvestOnDeposit(bool)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setStratFeeId(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setUnirouter(address)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "strategist()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unirouter()": FunctionFragment;
    "unpause()": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WITHDRAWAL_FEE_CAP"
      | "WITHDRAWAL_MAX"
      | "acceptTransfer"
      | "balanceOf"
      | "balanceOfPool"
      | "balanceOfWant"
      | "beefyFeeConfig"
      | "beefyFeeRecipient"
      | "beforeDeposit"
      | "callReward"
      | "chef"
      | "deposit"
      | "depositFee"
      | "getAllFees"
      | "getStratFeeId"
      | "glpManager"
      | "glpRewardStorage"
      | "gmxRewardStorage"
      | "gmxVault"
      | "harvest(address)"
      | "harvest()"
      | "harvestOnDeposit"
      | "initialize"
      | "keeper"
      | "lastHarvest"
      | "managerHarvest"
      | "minter"
      | "native"
      | "owner"
      | "panic"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "retireStrat"
      | "rewardsAvailable"
      | "setBeefyFeeConfig"
      | "setBeefyFeeRecipient"
      | "setHarvestOnDeposit"
      | "setKeeper"
      | "setStratFeeId"
      | "setStrategist"
      | "setUnirouter"
      | "setVault"
      | "setWithdrawalFee"
      | "strategist"
      | "transferOwnership"
      | "unirouter"
      | "unpause"
      | "vault"
      | "want"
      | "withdraw"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "WITHDRAWAL_FEE_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beefyFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beefyFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chef", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStratFeeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "glpRewardStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gmxRewardStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmxVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvest(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "harvest()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestOnDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      StratFeeManagerInitializable.CommonAddressesStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "native", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "panic", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireStrat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBeefyFeeConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeefyFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHarvestOnDeposit",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStratFeeId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnirouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unirouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_FEE_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beefyFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beefyFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStratFeeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "glpManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "glpRewardStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gmxRewardStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmxVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvest(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestOnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "native", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "panic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireStrat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeefyFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeefyFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHarvestOnDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStratFeeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnirouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unirouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "ChargedFees(uint256,uint256,uint256)": EventFragment;
    "Deposit(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetBeefyFeeConfig(address)": EventFragment;
    "SetBeefyFeeRecipient(address)": EventFragment;
    "SetKeeper(address)": EventFragment;
    "SetStratFeeId(uint256)": EventFragment;
    "SetStrategist(address)": EventFragment;
    "SetUnirouter(address)": EventFragment;
    "SetVault(address)": EventFragment;
    "SetWithdrawalFee(uint256)": EventFragment;
    "StratHarvest(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChargedFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBeefyFeeConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBeefyFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStratFeeId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUnirouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawalFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StratHarvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ChargedFeesEventObject {
  callFees: BigNumber;
  beefyFees: BigNumber;
  strategistFees: BigNumber;
}
export type ChargedFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ChargedFeesEventObject
>;

export type ChargedFeesEventFilter = TypedEventFilter<ChargedFeesEvent>;

export interface DepositEventObject {
  tvl: BigNumber;
}
export type DepositEvent = TypedEvent<[BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetBeefyFeeConfigEventObject {
  beefyFeeConfig: string;
}
export type SetBeefyFeeConfigEvent = TypedEvent<
  [string],
  SetBeefyFeeConfigEventObject
>;

export type SetBeefyFeeConfigEventFilter =
  TypedEventFilter<SetBeefyFeeConfigEvent>;

export interface SetBeefyFeeRecipientEventObject {
  beefyFeeRecipient: string;
}
export type SetBeefyFeeRecipientEvent = TypedEvent<
  [string],
  SetBeefyFeeRecipientEventObject
>;

export type SetBeefyFeeRecipientEventFilter =
  TypedEventFilter<SetBeefyFeeRecipientEvent>;

export interface SetKeeperEventObject {
  keeper: string;
}
export type SetKeeperEvent = TypedEvent<[string], SetKeeperEventObject>;

export type SetKeeperEventFilter = TypedEventFilter<SetKeeperEvent>;

export interface SetStratFeeIdEventObject {
  feeId: BigNumber;
}
export type SetStratFeeIdEvent = TypedEvent<
  [BigNumber],
  SetStratFeeIdEventObject
>;

export type SetStratFeeIdEventFilter = TypedEventFilter<SetStratFeeIdEvent>;

export interface SetStrategistEventObject {
  strategist: string;
}
export type SetStrategistEvent = TypedEvent<[string], SetStrategistEventObject>;

export type SetStrategistEventFilter = TypedEventFilter<SetStrategistEvent>;

export interface SetUnirouterEventObject {
  unirouter: string;
}
export type SetUnirouterEvent = TypedEvent<[string], SetUnirouterEventObject>;

export type SetUnirouterEventFilter = TypedEventFilter<SetUnirouterEvent>;

export interface SetVaultEventObject {
  vault: string;
}
export type SetVaultEvent = TypedEvent<[string], SetVaultEventObject>;

export type SetVaultEventFilter = TypedEventFilter<SetVaultEvent>;

export interface SetWithdrawalFeeEventObject {
  withdrawalFee: BigNumber;
}
export type SetWithdrawalFeeEvent = TypedEvent<
  [BigNumber],
  SetWithdrawalFeeEventObject
>;

export type SetWithdrawalFeeEventFilter =
  TypedEventFilter<SetWithdrawalFeeEvent>;

export interface StratHarvestEventObject {
  harvester: string;
  wantHarvested: BigNumber;
  tvl: BigNumber;
}
export type StratHarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StratHarvestEventObject
>;

export type StratHarvestEventFilter = TypedEventFilter<StratHarvestEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  tvl: BigNumber;
}
export type WithdrawEvent = TypedEvent<[BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface StrategyGLP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyGLPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<[string]>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    chef(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllFees(
      overrides?: CallOverrides
    ): Promise<[IFeeConfig.AllFeesStructOutput]>;

    getStratFeeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    glpManager(overrides?: CallOverrides): Promise<[string]>;

    glpRewardStorage(overrides?: CallOverrides): Promise<[string]>;

    gmxRewardStorage(overrides?: CallOverrides): Promise<[string]>;

    gmxVault(overrides?: CallOverrides): Promise<[string]>;

    "harvest(address)"(
      callFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestOnDeposit(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      _want: PromiseOrValue<string>,
      _native: PromiseOrValue<string>,
      _minter: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _commonAddresses: StratFeeManagerInitializable.CommonAddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    lastHarvest(overrides?: CallOverrides): Promise<[BigNumber]>;

    managerHarvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    native(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    panic(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retireStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsAvailable(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHarvestOnDeposit(
      _harvestOnDeposit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unirouter(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  acceptTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  beefyFeeConfig(overrides?: CallOverrides): Promise<string>;

  beefyFeeRecipient(overrides?: CallOverrides): Promise<string>;

  beforeDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callReward(overrides?: CallOverrides): Promise<BigNumber>;

  chef(overrides?: CallOverrides): Promise<string>;

  deposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  getAllFees(
    overrides?: CallOverrides
  ): Promise<IFeeConfig.AllFeesStructOutput>;

  getStratFeeId(overrides?: CallOverrides): Promise<BigNumber>;

  glpManager(overrides?: CallOverrides): Promise<string>;

  glpRewardStorage(overrides?: CallOverrides): Promise<string>;

  gmxRewardStorage(overrides?: CallOverrides): Promise<string>;

  gmxVault(overrides?: CallOverrides): Promise<string>;

  "harvest(address)"(
    callFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestOnDeposit(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _want: PromiseOrValue<string>,
    _native: PromiseOrValue<string>,
    _minter: PromiseOrValue<string>,
    _chef: PromiseOrValue<string>,
    _commonAddresses: StratFeeManagerInitializable.CommonAddressesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  managerHarvest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  native(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  panic(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retireStrat(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

  setBeefyFeeConfig(
    _beefyFeeConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBeefyFeeRecipient(
    _beefyFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHarvestOnDeposit(
    _harvestOnDeposit: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStratFeeId(
    _feeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUnirouter(
    _unirouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unirouter(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTransfer(overrides?: CallOverrides): Promise<void>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<string>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<string>;

    beforeDeposit(overrides?: CallOverrides): Promise<void>;

    callReward(overrides?: CallOverrides): Promise<BigNumber>;

    chef(overrides?: CallOverrides): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFees(
      overrides?: CallOverrides
    ): Promise<IFeeConfig.AllFeesStructOutput>;

    getStratFeeId(overrides?: CallOverrides): Promise<BigNumber>;

    glpManager(overrides?: CallOverrides): Promise<string>;

    glpRewardStorage(overrides?: CallOverrides): Promise<string>;

    gmxRewardStorage(overrides?: CallOverrides): Promise<string>;

    gmxVault(overrides?: CallOverrides): Promise<string>;

    "harvest(address)"(
      callFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    harvestOnDeposit(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      _want: PromiseOrValue<string>,
      _native: PromiseOrValue<string>,
      _minter: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _commonAddresses: StratFeeManagerInitializable.CommonAddressesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    managerHarvest(overrides?: CallOverrides): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    native(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    panic(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retireStrat(overrides?: CallOverrides): Promise<void>;

    rewardsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHarvestOnDeposit(
      _harvestOnDeposit: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unirouter(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ChargedFees(uint256,uint256,uint256)"(
      callFees?: null,
      beefyFees?: null,
      strategistFees?: null
    ): ChargedFeesEventFilter;
    ChargedFees(
      callFees?: null,
      beefyFees?: null,
      strategistFees?: null
    ): ChargedFeesEventFilter;

    "Deposit(uint256)"(tvl?: null): DepositEventFilter;
    Deposit(tvl?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetBeefyFeeConfig(address)"(
      beefyFeeConfig?: null
    ): SetBeefyFeeConfigEventFilter;
    SetBeefyFeeConfig(beefyFeeConfig?: null): SetBeefyFeeConfigEventFilter;

    "SetBeefyFeeRecipient(address)"(
      beefyFeeRecipient?: null
    ): SetBeefyFeeRecipientEventFilter;
    SetBeefyFeeRecipient(
      beefyFeeRecipient?: null
    ): SetBeefyFeeRecipientEventFilter;

    "SetKeeper(address)"(keeper?: null): SetKeeperEventFilter;
    SetKeeper(keeper?: null): SetKeeperEventFilter;

    "SetStratFeeId(uint256)"(feeId?: null): SetStratFeeIdEventFilter;
    SetStratFeeId(feeId?: null): SetStratFeeIdEventFilter;

    "SetStrategist(address)"(strategist?: null): SetStrategistEventFilter;
    SetStrategist(strategist?: null): SetStrategistEventFilter;

    "SetUnirouter(address)"(unirouter?: null): SetUnirouterEventFilter;
    SetUnirouter(unirouter?: null): SetUnirouterEventFilter;

    "SetVault(address)"(vault?: null): SetVaultEventFilter;
    SetVault(vault?: null): SetVaultEventFilter;

    "SetWithdrawalFee(uint256)"(
      withdrawalFee?: null
    ): SetWithdrawalFeeEventFilter;
    SetWithdrawalFee(withdrawalFee?: null): SetWithdrawalFeeEventFilter;

    "StratHarvest(address,uint256,uint256)"(
      harvester?: PromiseOrValue<string> | null,
      wantHarvested?: null,
      tvl?: null
    ): StratHarvestEventFilter;
    StratHarvest(
      harvester?: PromiseOrValue<string> | null,
      wantHarvested?: null,
      tvl?: null
    ): StratHarvestEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(uint256)"(tvl?: null): WithdrawEventFilter;
    Withdraw(tvl?: null): WithdrawEventFilter;
  };

  estimateGas: {
    WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callReward(overrides?: CallOverrides): Promise<BigNumber>;

    chef(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFees(overrides?: CallOverrides): Promise<BigNumber>;

    getStratFeeId(overrides?: CallOverrides): Promise<BigNumber>;

    glpManager(overrides?: CallOverrides): Promise<BigNumber>;

    glpRewardStorage(overrides?: CallOverrides): Promise<BigNumber>;

    gmxRewardStorage(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVault(overrides?: CallOverrides): Promise<BigNumber>;

    "harvest(address)"(
      callFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestOnDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _want: PromiseOrValue<string>,
      _native: PromiseOrValue<string>,
      _minter: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _commonAddresses: StratFeeManagerInitializable.CommonAddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    managerHarvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    native(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    panic(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retireStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHarvestOnDeposit(
      _harvestOnDeposit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unirouter(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WITHDRAWAL_FEE_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStratFeeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    glpRewardStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxRewardStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "harvest(address)"(
      callFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestOnDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _want: PromiseOrValue<string>,
      _native: PromiseOrValue<string>,
      _minter: PromiseOrValue<string>,
      _chef: PromiseOrValue<string>,
      _commonAddresses: StratFeeManagerInitializable.CommonAddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerHarvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    native(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    panic(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retireStrat(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHarvestOnDeposit(
      _harvestOnDeposit: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unirouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
