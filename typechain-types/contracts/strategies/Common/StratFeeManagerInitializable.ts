/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IFeeConfig {
  export type FeeCategoryStruct = {
    total: PromiseOrValue<BigNumberish>;
    beefy: PromiseOrValue<BigNumberish>;
    call: PromiseOrValue<BigNumberish>;
    strategist: PromiseOrValue<BigNumberish>;
    label: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
  };

  export type FeeCategoryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    total: BigNumber;
    beefy: BigNumber;
    call: BigNumber;
    strategist: BigNumber;
    label: string;
    active: boolean;
  };

  export type AllFeesStruct = {
    performance: IFeeConfig.FeeCategoryStruct;
    deposit: PromiseOrValue<BigNumberish>;
    withdraw: PromiseOrValue<BigNumberish>;
  };

  export type AllFeesStructOutput = [
    IFeeConfig.FeeCategoryStructOutput,
    BigNumber,
    BigNumber
  ] & {
    performance: IFeeConfig.FeeCategoryStructOutput;
    deposit: BigNumber;
    withdraw: BigNumber;
  };
}

export interface StratFeeManagerInitializableInterface extends utils.Interface {
  functions: {
    "WITHDRAWAL_FEE_CAP()": FunctionFragment;
    "WITHDRAWAL_MAX()": FunctionFragment;
    "beefyFeeConfig()": FunctionFragment;
    "beefyFeeRecipient()": FunctionFragment;
    "beforeDeposit()": FunctionFragment;
    "depositFee()": FunctionFragment;
    "getAllFees()": FunctionFragment;
    "getStratFeeId()": FunctionFragment;
    "keeper()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBeefyFeeConfig(address)": FunctionFragment;
    "setBeefyFeeRecipient(address)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setStratFeeId(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setUnirouter(address)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "strategist()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unirouter()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WITHDRAWAL_FEE_CAP"
      | "WITHDRAWAL_MAX"
      | "beefyFeeConfig"
      | "beefyFeeRecipient"
      | "beforeDeposit"
      | "depositFee"
      | "getAllFees"
      | "getStratFeeId"
      | "keeper"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setBeefyFeeConfig"
      | "setBeefyFeeRecipient"
      | "setKeeper"
      | "setStratFeeId"
      | "setStrategist"
      | "setUnirouter"
      | "setVault"
      | "setWithdrawalFee"
      | "strategist"
      | "transferOwnership"
      | "unirouter"
      | "vault"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "WITHDRAWAL_FEE_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWAL_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beefyFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beefyFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStratFeeId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBeefyFeeConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeefyFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStratFeeId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnirouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unirouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_FEE_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWAL_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beefyFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beefyFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStratFeeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeefyFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeefyFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStratFeeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnirouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unirouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetBeefyFeeConfig(address)": EventFragment;
    "SetBeefyFeeRecipient(address)": EventFragment;
    "SetKeeper(address)": EventFragment;
    "SetStratFeeId(uint256)": EventFragment;
    "SetStrategist(address)": EventFragment;
    "SetUnirouter(address)": EventFragment;
    "SetVault(address)": EventFragment;
    "SetWithdrawalFee(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBeefyFeeConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBeefyFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStratFeeId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStrategist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUnirouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawalFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetBeefyFeeConfigEventObject {
  beefyFeeConfig: string;
}
export type SetBeefyFeeConfigEvent = TypedEvent<
  [string],
  SetBeefyFeeConfigEventObject
>;

export type SetBeefyFeeConfigEventFilter =
  TypedEventFilter<SetBeefyFeeConfigEvent>;

export interface SetBeefyFeeRecipientEventObject {
  beefyFeeRecipient: string;
}
export type SetBeefyFeeRecipientEvent = TypedEvent<
  [string],
  SetBeefyFeeRecipientEventObject
>;

export type SetBeefyFeeRecipientEventFilter =
  TypedEventFilter<SetBeefyFeeRecipientEvent>;

export interface SetKeeperEventObject {
  keeper: string;
}
export type SetKeeperEvent = TypedEvent<[string], SetKeeperEventObject>;

export type SetKeeperEventFilter = TypedEventFilter<SetKeeperEvent>;

export interface SetStratFeeIdEventObject {
  feeId: BigNumber;
}
export type SetStratFeeIdEvent = TypedEvent<
  [BigNumber],
  SetStratFeeIdEventObject
>;

export type SetStratFeeIdEventFilter = TypedEventFilter<SetStratFeeIdEvent>;

export interface SetStrategistEventObject {
  strategist: string;
}
export type SetStrategistEvent = TypedEvent<[string], SetStrategistEventObject>;

export type SetStrategistEventFilter = TypedEventFilter<SetStrategistEvent>;

export interface SetUnirouterEventObject {
  unirouter: string;
}
export type SetUnirouterEvent = TypedEvent<[string], SetUnirouterEventObject>;

export type SetUnirouterEventFilter = TypedEventFilter<SetUnirouterEvent>;

export interface SetVaultEventObject {
  vault: string;
}
export type SetVaultEvent = TypedEvent<[string], SetVaultEventObject>;

export type SetVaultEventFilter = TypedEventFilter<SetVaultEvent>;

export interface SetWithdrawalFeeEventObject {
  withdrawalFee: BigNumber;
}
export type SetWithdrawalFeeEvent = TypedEvent<
  [BigNumber],
  SetWithdrawalFeeEventObject
>;

export type SetWithdrawalFeeEventFilter =
  TypedEventFilter<SetWithdrawalFeeEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface StratFeeManagerInitializable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StratFeeManagerInitializableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<[string]>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllFees(
      overrides?: CallOverrides
    ): Promise<[IFeeConfig.AllFeesStructOutput]>;

    getStratFeeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unirouter(overrides?: CallOverrides): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdrawFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  beefyFeeConfig(overrides?: CallOverrides): Promise<string>;

  beefyFeeRecipient(overrides?: CallOverrides): Promise<string>;

  beforeDeposit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  getAllFees(
    overrides?: CallOverrides
  ): Promise<IFeeConfig.AllFeesStructOutput>;

  getStratFeeId(overrides?: CallOverrides): Promise<BigNumber>;

  keeper(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBeefyFeeConfig(
    _beefyFeeConfig: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBeefyFeeRecipient(
    _beefyFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStratFeeId(
    _feeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUnirouter(
    _unirouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unirouter(overrides?: CallOverrides): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<string>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<string>;

    beforeDeposit(overrides?: CallOverrides): Promise<void>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFees(
      overrides?: CallOverrides
    ): Promise<IFeeConfig.AllFeesStructOutput>;

    getStratFeeId(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unirouter(overrides?: CallOverrides): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetBeefyFeeConfig(address)"(
      beefyFeeConfig?: null
    ): SetBeefyFeeConfigEventFilter;
    SetBeefyFeeConfig(beefyFeeConfig?: null): SetBeefyFeeConfigEventFilter;

    "SetBeefyFeeRecipient(address)"(
      beefyFeeRecipient?: null
    ): SetBeefyFeeRecipientEventFilter;
    SetBeefyFeeRecipient(
      beefyFeeRecipient?: null
    ): SetBeefyFeeRecipientEventFilter;

    "SetKeeper(address)"(keeper?: null): SetKeeperEventFilter;
    SetKeeper(keeper?: null): SetKeeperEventFilter;

    "SetStratFeeId(uint256)"(feeId?: null): SetStratFeeIdEventFilter;
    SetStratFeeId(feeId?: null): SetStratFeeIdEventFilter;

    "SetStrategist(address)"(strategist?: null): SetStrategistEventFilter;
    SetStrategist(strategist?: null): SetStrategistEventFilter;

    "SetUnirouter(address)"(unirouter?: null): SetUnirouterEventFilter;
    SetUnirouter(unirouter?: null): SetUnirouterEventFilter;

    "SetVault(address)"(vault?: null): SetVaultEventFilter;
    SetVault(vault?: null): SetVaultEventFilter;

    "SetWithdrawalFee(uint256)"(
      withdrawalFee?: null
    ): SetWithdrawalFeeEventFilter;
    SetWithdrawalFee(withdrawalFee?: null): SetWithdrawalFeeEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    WITHDRAWAL_FEE_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    getAllFees(overrides?: CallOverrides): Promise<BigNumber>;

    getStratFeeId(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unirouter(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WITHDRAWAL_FEE_CAP(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAWAL_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beefyFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beefyFeeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beforeDeposit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStratFeeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBeefyFeeConfig(
      _beefyFeeConfig: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBeefyFeeRecipient(
      _beefyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStratFeeId(
      _feeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUnirouter(
      _unirouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unirouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
