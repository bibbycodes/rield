/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Trading {
  export type ProductStruct = {
    maxLeverage: PromiseOrValue<BigNumberish>;
    liquidationThreshold: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
    interest: PromiseOrValue<BigNumberish>;
  };

  export type ProductStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxLeverage: BigNumber;
    liquidationThreshold: BigNumber;
    fee: BigNumber;
    interest: BigNumber;
  };

  export type OrderStruct = {
    isClose: PromiseOrValue<boolean>;
    size: PromiseOrValue<BigNumberish>;
    margin: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [boolean, BigNumber, BigNumber] & {
    isClose: boolean;
    size: BigNumber;
    margin: BigNumber;
  };

  export type PositionStruct = {
    size: PromiseOrValue<BigNumberish>;
    margin: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type PositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    size: BigNumber;
    margin: BigNumber;
    timestamp: BigNumber;
    price: BigNumber;
  };
}

export interface TradingInterface extends utils.Interface {
  functions: {
    "PRICE_DECIMALS()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "UNIT_DECIMALS()": FunctionFragment;
    "addProduct(bytes32,(uint64,uint64,uint64,uint64))": FunctionFragment;
    "cancelOrder(bytes32,address,bool)": FunctionFragment;
    "distributeFees(address)": FunctionFragment;
    "getOrder(address,address,bytes32,bool)": FunctionFragment;
    "getOrders(bytes32[])": FunctionFragment;
    "getPendingFee(address)": FunctionFragment;
    "getPosition(address,address,bytes32,bool)": FunctionFragment;
    "getPositions(bytes32[])": FunctionFragment;
    "getProduct(bytes32)": FunctionFragment;
    "liquidatePosition(address,bytes32,address,bool,uint256)": FunctionFragment;
    "nextCloseOrderId()": FunctionFragment;
    "nextPositionId()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "releaseMargin(address,bytes32,address,bool,bool)": FunctionFragment;
    "router()": FunctionFragment;
    "setMinMargin(address,uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "settleOrder(address,bytes32,address,bool,uint256)": FunctionFragment;
    "submitCloseOrder(bytes32,address,bool,uint256)": FunctionFragment;
    "submitOrder(bytes32,address,bool,uint256,uint256)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateProduct(bytes32,(uint64,uint64,uint64,uint64))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PRICE_DECIMALS"
      | "UNIT"
      | "UNIT_DECIMALS"
      | "addProduct"
      | "cancelOrder"
      | "distributeFees"
      | "getOrder"
      | "getOrders"
      | "getPendingFee"
      | "getPosition"
      | "getPositions"
      | "getProduct"
      | "liquidatePosition"
      | "nextCloseOrderId"
      | "nextPositionId"
      | "oracle"
      | "owner"
      | "releaseMargin"
      | "router"
      | "setMinMargin"
      | "setOwner"
      | "setRouter"
      | "settleOrder"
      | "submitCloseOrder"
      | "submitOrder"
      | "treasury"
      | "updateProduct"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UNIT_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProduct",
    values: [PromiseOrValue<BytesLike>, Trading.ProductStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrders",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCloseOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPositionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseMargin",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMinMargin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitCloseOrder",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrder",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [PromiseOrValue<BytesLike>, Trading.ProductStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UNIT_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCloseOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCloseOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;

  events: {
    "ClosePosition(bytes32,address,bytes32,address,bool,uint256,uint256,uint256,uint256,int256,bool)": EventFragment;
    "NewOrder(bytes32,address,bytes32,address,bool,uint256,uint256,bool)": EventFragment;
    "PositionUpdated(bytes32,address,bytes32,address,bool,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionUpdated"): EventFragment;
}

export interface ClosePositionEventObject {
  key: string;
  user: string;
  productId: string;
  currency: string;
  isLong: boolean;
  price: BigNumber;
  margin: BigNumber;
  size: BigNumber;
  fee: BigNumber;
  pnl: BigNumber;
  wasLiquidated: boolean;
}
export type ClosePositionEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface NewOrderEventObject {
  key: string;
  user: string;
  productId: string;
  currency: string;
  isLong: boolean;
  margin: BigNumber;
  size: BigNumber;
  isClose: boolean;
}
export type NewOrderEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber, BigNumber, boolean],
  NewOrderEventObject
>;

export type NewOrderEventFilter = TypedEventFilter<NewOrderEvent>;

export interface PositionUpdatedEventObject {
  key: string;
  user: string;
  productId: string;
  currency: string;
  isLong: boolean;
  margin: BigNumber;
  size: BigNumber;
  price: BigNumber;
  fee: BigNumber;
}
export type PositionUpdatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionUpdatedEventObject
>;

export type PositionUpdatedEventFilter = TypedEventFilter<PositionUpdatedEvent>;

export interface Trading extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PRICE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeFees(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOrder(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [Trading.OrderStructOutput] & { order: Trading.OrderStructOutput }
    >;

    getOrders(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [Trading.OrderStructOutput[]] & { _orders: Trading.OrderStructOutput[] }
    >;

    getPendingFee(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [Trading.PositionStructOutput] & {
        position: Trading.PositionStructOutput;
      }
    >;

    getPositions(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [Trading.PositionStructOutput[]] & {
        _positions: Trading.PositionStructOutput[];
      }
    >;

    getProduct(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Trading.ProductStructOutput]>;

    liquidatePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nextCloseOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextPositionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    releaseMargin(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      includeFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setMinMargin(
      currency: PromiseOrValue<string>,
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleOrder(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitCloseOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      margin: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addProduct(
    productId: PromiseOrValue<BytesLike>,
    _product: Trading.ProductStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    productId: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeFees(
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOrder(
    user: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    productId: PromiseOrValue<BytesLike>,
    isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<Trading.OrderStructOutput>;

  getOrders(
    keys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<Trading.OrderStructOutput[]>;

  getPendingFee(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    user: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    productId: PromiseOrValue<BytesLike>,
    isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<Trading.PositionStructOutput>;

  getPositions(
    keys: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<Trading.PositionStructOutput[]>;

  getProduct(
    productId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Trading.ProductStructOutput>;

  liquidatePosition(
    user: PromiseOrValue<string>,
    productId: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nextCloseOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  nextPositionId(overrides?: CallOverrides): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  releaseMargin(
    user: PromiseOrValue<string>,
    productId: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    includeFee: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setMinMargin(
    currency: PromiseOrValue<string>,
    _minMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleOrder(
    user: PromiseOrValue<string>,
    productId: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitCloseOrder(
    productId: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitOrder(
    productId: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    margin: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateProduct(
    productId: PromiseOrValue<BytesLike>,
    _product: Trading.ProductStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeFees(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOrder(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<Trading.OrderStructOutput>;

    getOrders(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<Trading.OrderStructOutput[]>;

    getPendingFee(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<Trading.PositionStructOutput>;

    getPositions(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<Trading.PositionStructOutput[]>;

    getProduct(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Trading.ProductStructOutput>;

    liquidatePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nextCloseOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionId(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    releaseMargin(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      includeFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setMinMargin(
      currency: PromiseOrValue<string>,
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOrder(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitCloseOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      margin: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ClosePosition(bytes32,address,bytes32,address,bool,uint256,uint256,uint256,uint256,int256,bool)"(
      key?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BytesLike> | null,
      currency?: null,
      isLong?: null,
      price?: null,
      margin?: null,
      size?: null,
      fee?: null,
      pnl?: null,
      wasLiquidated?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      key?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BytesLike> | null,
      currency?: null,
      isLong?: null,
      price?: null,
      margin?: null,
      size?: null,
      fee?: null,
      pnl?: null,
      wasLiquidated?: null
    ): ClosePositionEventFilter;

    "NewOrder(bytes32,address,bytes32,address,bool,uint256,uint256,bool)"(
      key?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BytesLike> | null,
      currency?: null,
      isLong?: null,
      margin?: null,
      size?: null,
      isClose?: null
    ): NewOrderEventFilter;
    NewOrder(
      key?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BytesLike> | null,
      currency?: null,
      isLong?: null,
      margin?: null,
      size?: null,
      isClose?: null
    ): NewOrderEventFilter;

    "PositionUpdated(bytes32,address,bytes32,address,bool,uint256,uint256,uint256,uint256)"(
      key?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BytesLike> | null,
      currency?: null,
      isLong?: null,
      margin?: null,
      size?: null,
      price?: null,
      fee?: null
    ): PositionUpdatedEventFilter;
    PositionUpdated(
      key?: PromiseOrValue<BytesLike> | null,
      user?: PromiseOrValue<string> | null,
      productId?: PromiseOrValue<BytesLike> | null,
      currency?: null,
      isLong?: null,
      margin?: null,
      size?: null,
      price?: null,
      fee?: null
    ): PositionUpdatedEventFilter;
  };

  estimateGas: {
    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeFees(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOrder(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrders(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingFee(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositions(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProduct(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nextCloseOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    nextPositionId(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    releaseMargin(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      includeFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setMinMargin(
      currency: PromiseOrValue<string>,
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleOrder(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitCloseOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      margin: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeFees(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOrder(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrders(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingFee(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      user: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositions(
      keys: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProduct(
      productId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nextCloseOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPositionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseMargin(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      includeFee: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinMargin(
      currency: PromiseOrValue<string>,
      _minMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleOrder(
      user: PromiseOrValue<string>,
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitCloseOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitOrder(
      productId: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      margin: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateProduct(
      productId: PromiseOrValue<BytesLike>,
      _product: Trading.ProductStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
