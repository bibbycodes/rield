/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface OracleInterface extends utils.Interface {
  functions: {
    "costPerRequest()": FunctionFragment;
    "darkOracle()": FunctionFragment;
    "liquidatePositions(address[],bytes32[],address[],bool[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "requestsPerFunding()": FunctionFragment;
    "requestsSinceFunding()": FunctionFragment;
    "router()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setParams(uint256,uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "settleOrders(address[],bytes32[],address[],bool[],uint256[])": FunctionFragment;
    "trading()": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "costPerRequest"
      | "darkOracle"
      | "liquidatePositions"
      | "owner"
      | "requestsPerFunding"
      | "requestsSinceFunding"
      | "router"
      | "setOwner"
      | "setParams"
      | "setRouter"
      | "settleOrders"
      | "trading"
      | "treasury"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "costPerRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "darkOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePositions",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestsPerFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestsSinceFunding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrders",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "trading", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "costPerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "darkOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestsPerFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestsSinceFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trading", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "SettlementError(address,address,bytes32,bool,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SettlementError"): EventFragment;
}

export interface SettlementErrorEventObject {
  user: string;
  currency: string;
  productId: string;
  isLong: boolean;
  reason: string;
}
export type SettlementErrorEvent = TypedEvent<
  [string, string, string, boolean, string],
  SettlementErrorEventObject
>;

export type SettlementErrorEventFilter = TypedEventFilter<SettlementErrorEvent>;

export interface Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    costPerRequest(overrides?: CallOverrides): Promise<[BigNumber]>;

    darkOracle(overrides?: CallOverrides): Promise<[string]>;

    liquidatePositions(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requestsPerFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestsSinceFunding(overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParams(
      _requestsPerFunding: PromiseOrValue<BigNumberish>,
      _costPerRequest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleOrders(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trading(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  costPerRequest(overrides?: CallOverrides): Promise<BigNumber>;

  darkOracle(overrides?: CallOverrides): Promise<string>;

  liquidatePositions(
    users: PromiseOrValue<string>[],
    productIds: PromiseOrValue<BytesLike>[],
    currencies: PromiseOrValue<string>[],
    directions: PromiseOrValue<boolean>[],
    prices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  requestsPerFunding(overrides?: CallOverrides): Promise<BigNumber>;

  requestsSinceFunding(overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParams(
    _requestsPerFunding: PromiseOrValue<BigNumberish>,
    _costPerRequest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleOrders(
    users: PromiseOrValue<string>[],
    productIds: PromiseOrValue<BytesLike>[],
    currencies: PromiseOrValue<string>[],
    directions: PromiseOrValue<boolean>[],
    prices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trading(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    costPerRequest(overrides?: CallOverrides): Promise<BigNumber>;

    darkOracle(overrides?: CallOverrides): Promise<string>;

    liquidatePositions(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    requestsPerFunding(overrides?: CallOverrides): Promise<BigNumber>;

    requestsSinceFunding(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      _requestsPerFunding: PromiseOrValue<BigNumberish>,
      _costPerRequest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleOrders(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    trading(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "SettlementError(address,address,bytes32,bool,string)"(
      user?: PromiseOrValue<string> | null,
      currency?: null,
      productId?: null,
      isLong?: null,
      reason?: null
    ): SettlementErrorEventFilter;
    SettlementError(
      user?: PromiseOrValue<string> | null,
      currency?: null,
      productId?: null,
      isLong?: null,
      reason?: null
    ): SettlementErrorEventFilter;
  };

  estimateGas: {
    costPerRequest(overrides?: CallOverrides): Promise<BigNumber>;

    darkOracle(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePositions(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requestsPerFunding(overrides?: CallOverrides): Promise<BigNumber>;

    requestsSinceFunding(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParams(
      _requestsPerFunding: PromiseOrValue<BigNumberish>,
      _costPerRequest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleOrders(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trading(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    costPerRequest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    darkOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidatePositions(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestsPerFunding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestsSinceFunding(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      _requestsPerFunding: PromiseOrValue<BigNumberish>,
      _costPerRequest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleOrders(
      users: PromiseOrValue<string>[],
      productIds: PromiseOrValue<BytesLike>[],
      currencies: PromiseOrValue<string>[],
      directions: PromiseOrValue<boolean>[],
      prices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trading(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
