/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  GasFeeThrottler,
  GasFeeThrottlerInterface,
} from "../../../contracts/utils/GasFeeThrottler";

const _abi = [
  {
    inputs: [],
    name: "gasprice",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "shouldGasThrottle",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600080546001600160a81b03191674a43509661141f254f54d9a326e8ec851a0b953070117905534801561003757600080fd5b5060bc806100466000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80636ec232d31460375780639f8b5da114606b575b600080fd5b600054604e9061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60005460779060ff1681565b6040519015158152602001606256fea264697066735822122035694b70d0466d521514a905a21d0e3f4560eb0ea5dc8f447cb58b4aa999e8dc64736f6c634300080c0033";

type GasFeeThrottlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasFeeThrottlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GasFeeThrottler__factory extends ContractFactory {
  constructor(...args: GasFeeThrottlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GasFeeThrottler> {
    return super.deploy(overrides || {}) as Promise<GasFeeThrottler>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasFeeThrottler {
    return super.attach(address) as GasFeeThrottler;
  }
  override connect(signer: Signer): GasFeeThrottler__factory {
    return super.connect(signer) as GasFeeThrottler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasFeeThrottlerInterface {
    return new utils.Interface(_abi) as GasFeeThrottlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GasFeeThrottler {
    return new Contract(address, _abi, signerOrProvider) as GasFeeThrottler;
  }
}
