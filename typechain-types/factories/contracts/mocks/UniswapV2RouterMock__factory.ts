/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UniswapV2RouterMock,
  UniswapV2RouterMockInterface,
} from "../../../contracts/mocks/UniswapV2RouterMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountADesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountTokenDesired",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "addLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
    ],
    name: "getAmountsOut",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountAMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountBMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "removeLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountTokenMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETHMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "removeLiquidityETH",
    outputs: [
      {
        internalType: "uint256",
        name: "amountToken",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountETH",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactETHForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForETH",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    name: "swapExactTokensForTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610739806100206000396000f3fe60806040526004361061007b5760003560e01c8063baa2abde1161004e578063baa2abde14610123578063d06ca61f1461014d578063e8e337001461016d578063f305d719146101b557600080fd5b806302751cec1461008057806318cbafe5146100c357806338ed1739146100f05780637ff36ab514610110575b600080fd5b34801561008c57600080fd5b506100a961009b36600461039c565b600080965096945050505050565b604080519283526020830191909152015b60405180910390f35b3480156100cf57600080fd5b506100e36100de366004610440565b6101d3565b6040516100ba91906104b0565b3480156100fc57600080fd5b506100e361010b366004610440565b610223565b6100e361011e3660046104f4565b610304565b34801561012f57600080fd5b506100a961013e36600461055a565b60008097509795505050505050565b34801561015957600080fd5b506100e36101683660046105c4565b610333565b34801561017957600080fd5b5061019a610188366004610610565b60008080985098509895505050505050565b604080519384526020840192909252908201526060016100ba565b61019a6101c336600461039c565b6000808096509650969350505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050878160008151811061020d5761020d610684565b6020908102919091010152979650505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050858561025660018261069a565b81811061026557610265610684565b905060200201602081019061027a91906106bf565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018b9052919091169063a9059cbb906044016020604051808303816000875af11580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef91906106e1565b50878160008151811061020d5761020d610684565b604080516001808252818301909252606091600091906020808301908036833701905050979650505050505050565b6040805160018082528183019092526060916000919060208083019080368337019050509050848160008151811061036d5761036d610684565b6020908102919091010152949350505050565b80356001600160a01b038116811461039757600080fd5b919050565b60008060008060008060c087890312156103b557600080fd5b6103be87610380565b95506020870135945060408701359350606087013592506103e160808801610380565b915060a087013590509295509295509295565b60008083601f84011261040657600080fd5b50813567ffffffffffffffff81111561041e57600080fd5b6020830191508360208260051b850101111561043957600080fd5b9250929050565b60008060008060008060a0878903121561045957600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561047e57600080fd5b61048a89828a016103f4565b909550935061049d905060608801610380565b9150608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b818110156104e8578351835292840192918401916001016104cc565b50909695505050505050565b60008060008060006080868803121561050c57600080fd5b85359450602086013567ffffffffffffffff81111561052a57600080fd5b610536888289016103f4565b9095509350610549905060408701610380565b949793965091946060013592915050565b600080600080600080600060e0888a03121561057557600080fd5b61057e88610380565b965061058c60208901610380565b95506040880135945060608801359350608088013592506105af60a08901610380565b915060c0880135905092959891949750929550565b6000806000604084860312156105d957600080fd5b83359250602084013567ffffffffffffffff8111156105f757600080fd5b610603868287016103f4565b9497909650939450505050565b600080600080600080600080610100898b03121561062d57600080fd5b61063689610380565b975061064460208a01610380565b965060408901359550606089013594506080890135935060a0890135925061066e60c08a01610380565b915060e089013590509295985092959890939650565b634e487b7160e01b600052603260045260246000fd5b6000828210156106ba57634e487b7160e01b600052601160045260246000fd5b500390565b6000602082840312156106d157600080fd5b6106da82610380565b9392505050565b6000602082840312156106f357600080fd5b815180151581146106da57600080fdfea26469706673582212206426a8c231ffd28772539bd841c45b4a0ad527666a380cdde1995b97477b7f1b64736f6c634300080c0033";

type UniswapV2RouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV2RouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV2RouterMock__factory extends ContractFactory {
  constructor(...args: UniswapV2RouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV2RouterMock> {
    return super.deploy(overrides || {}) as Promise<UniswapV2RouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapV2RouterMock {
    return super.attach(address) as UniswapV2RouterMock;
  }
  override connect(signer: Signer): UniswapV2RouterMock__factory {
    return super.connect(signer) as UniswapV2RouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV2RouterMockInterface {
    return new utils.Interface(_abi) as UniswapV2RouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV2RouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV2RouterMock;
  }
}
