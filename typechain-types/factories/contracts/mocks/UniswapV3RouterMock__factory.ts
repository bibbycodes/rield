/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  UniswapV3RouterMock,
  UniswapV3RouterMockInterface,
} from "../../../contracts/mocks/UniswapV3RouterMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
        ],
        internalType: "struct IUniswapRouterV3.ExactInputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountOutMinimum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IUniswapRouterV3.ExactInputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "path",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
        ],
        internalType: "struct IUniswapRouterV3.ExactOutputParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "uint24",
            name: "fee",
            type: "uint24",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountInMaximum",
            type: "uint256",
          },
          {
            internalType: "uint160",
            name: "sqrtPriceLimitX96",
            type: "uint160",
          },
        ],
        internalType: "struct IUniswapRouterV3.ExactOutputSingleParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "exactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610335806100206000396000f3fe60806040526004361061003f5760003560e01c806304e45aaf1461004457806309b813461461006b5780635023b4df1461007f578063b858183f1461006b575b600080fd5b6100596100523660046101db565b6080015190565b60405190815260200160405180910390f35b6100596100793660046102c2565b50600090565b6100596100793660046101db565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156100c6576100c661008d565b60405290565b6040516080810167ffffffffffffffff811182821017156100c6576100c661008d565b604051601f8201601f1916810167ffffffffffffffff811182821017156101185761011861008d565b604052919050565b6001600160a01b038116811461013557600080fd5b50565b803561014381610120565b919050565b600060e0828403121561015a57600080fd5b6101626100a3565b9050813561016f81610120565b8152602082013561017f81610120565b6020820152604082013562ffffff8116811461019a57600080fd5b60408201526101ab60608301610138565b60608201526080820135608082015260a082013560a08201526101d060c08301610138565b60c082015292915050565b600060e082840312156101ed57600080fd5b6101f78383610148565b9392505050565b60006080828403121561021057600080fd5b6102186100cc565b9050813567ffffffffffffffff8082111561023257600080fd5b818401915084601f83011261024657600080fd5b813560208282111561025a5761025a61008d565b61026c601f8301601f191682016100ef565b9250818352868183860101111561028257600080fd5b818185018285013760008183850101528285526102a0818701610138565b8186015250505050604082013560408201526060820135606082015292915050565b6000602082840312156102d457600080fd5b813567ffffffffffffffff8111156102eb57600080fd5b6102f7848285016101fe565b94935050505056fea2646970667358221220251604eeed04d9c0226a54bcca2973da5b54d2f870af70d23d84e149517f42af64736f6c634300080c0033";

type UniswapV3RouterMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV3RouterMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV3RouterMock__factory extends ContractFactory {
  constructor(...args: UniswapV3RouterMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<UniswapV3RouterMock> {
    return super.deploy(overrides || {}) as Promise<UniswapV3RouterMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): UniswapV3RouterMock {
    return super.attach(address) as UniswapV3RouterMock;
  }
  override connect(signer: Signer): UniswapV3RouterMock__factory {
    return super.connect(signer) as UniswapV3RouterMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV3RouterMockInterface {
    return new utils.Interface(_abi) as UniswapV3RouterMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV3RouterMock {
    return new Contract(address, _abi, signerOrProvider) as UniswapV3RouterMock;
  }
}
