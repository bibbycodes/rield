/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CapETHRewardsMock,
  CapETHRewardsMockInterface,
} from "../../../contracts/mocks/CapETHRewardsMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "CollectRewards",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "UNIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collectReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cumulativeRewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currency",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getClaimableReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_pool",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "notifyRewardReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    name: "setRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trading",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "treasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "updateRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103ee806100206000396000f3fe6080604052600436106101015760003560e01c8063835c28401161008f578063c0d7865511610061578063c0d786551461016c578063e38a195b1461026a578063e5a6b10f14610285578063ec44acf21461020e578063f887ea401461020e57005b8063835c28401461022257806388d52ef7146102365780638da5cb5b1461020e5780639d8e21771461025657005b806319ab453c116100d357806319ab453c146101bc57806354c5aee1146101f95780635fd619651461016c57806361d027b31461020e578063706b3f5e1461014a57005b80630700037d1461010a578063137ee36e1461014a57806313af40351461016c57806316f0115b1461018a57005b3661010857005b005b34801561011657600080fd5b5061013761012536600461036f565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561015657600080fd5b5033600090815260016020526040902054610137565b34801561017857600080fd5b5061010861018736600461036f565b50565b34801561019657600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610141565b3480156101c857600080fd5b506101086101d736600461036f565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b34801561020557600080fd5b50610108610298565b34801561021a57600080fd5b5060006101a4565b34801561022e57600080fd5b506000610137565b34801561024257600080fd5b506000546101a4906001600160a01b031681565b34801561026257600080fd5b506001610137565b34801561027657600080fd5b5061010861018736600461039f565b34801561029157600080fd5b50306101a4565b6040516000903390670de0b6b3a7640000908381818185875af1925050503d80600081146102e2576040519150601f19603f3d011682016040523d82523d6000602084013e6102e7565b606091505b505090508061032f5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015260640160405180910390fd5b604051670de0b6b3a7640000815233907f2a2d1456672a2b5013c6d74f8677f133bbf5f7d5bb6be09231f7814782b9a7179060200160405180910390a250565b60006020828403121561038157600080fd5b81356001600160a01b038116811461039857600080fd5b9392505050565b6000602082840312156103b157600080fd5b503591905056fea2646970667358221220f48245447aa243b448cbad8639f646cfa149ff5ca8313eafac6b5ff79ec1559f64736f6c634300080c0033";

type CapETHRewardsMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CapETHRewardsMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CapETHRewardsMock__factory extends ContractFactory {
  constructor(...args: CapETHRewardsMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CapETHRewardsMock> {
    return super.deploy(overrides || {}) as Promise<CapETHRewardsMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CapETHRewardsMock {
    return super.attach(address) as CapETHRewardsMock;
  }
  override connect(signer: Signer): CapETHRewardsMock__factory {
    return super.connect(signer) as CapETHRewardsMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CapETHRewardsMockInterface {
    return new utils.Interface(_abi) as CapETHRewardsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CapETHRewardsMock {
    return new Contract(address, _abi, signerOrProvider) as CapETHRewardsMock;
  }
}
