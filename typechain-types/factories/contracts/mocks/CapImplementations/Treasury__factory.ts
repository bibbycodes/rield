/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Treasury,
  TreasuryInterface,
} from "../../../../contracts/mocks/CapImplementations/Treasury";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "UNIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "fundOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "notifyFeeReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "router",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sendFunds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    name: "setRouter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "trading",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610f26806100326000396000f3fe60806040526004361061008f5760003560e01c8063c0d7865511610056578063c0d786551461015f578063e0062d791461017f578063e0ca14741461019f578063ec44acf2146101bf578063f887ea40146101df57005b806313af4035146100985780637dc0d1d0146100b85780638da5cb5b146100f55780639d8e217714610115578063a5a01c5d1461013f57005b3661009657005b005b3480156100a457600080fd5b506100966100b3366004610c07565b6101ff565b3480156100c457600080fd5b506003546100d8906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010157600080fd5b506000546100d8906001600160a01b031681565b34801561012157600080fd5b50610131670de0b6b3a764000081565b6040519081526020016100ec565b34801561014b57600080fd5b5061009661015a366004610c24565b610254565b34801561016b57600080fd5b5061009661017a366004610c07565b6102be565b34801561018b57600080fd5b5061009661019a366004610c24565b61040a565b3480156101ab57600080fd5b506100966101ba366004610c50565b61071e565b3480156101cb57600080fd5b506002546100d8906001600160a01b031681565b3480156101eb57600080fd5b506001546100d8906001600160a01b031681565b6000546001600160a01b031633146102325760405162461bcd60e51b815260040161022990610c91565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031633146102985760405162461bcd60e51b8152602060048201526007602482015266216f7261636c6560c81b6044820152606401610229565b47808211156102a657505050565b6102b96001600160a01b03841683610753565b505050565b6000546001600160a01b031633146102e85760405162461bcd60e51b815260040161022990610c91565b600180546001600160a01b0319166001600160a01b038316908117909155604080516307dc0d1d60e41b81529051637dc0d1d0916004808201926020929091908290030181865afa158015610341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103659190610cb1565b600380546001600160a01b0319166001600160a01b0392831617905560015460408051637622567960e11b81529051919092169163ec44acf29160048083019260209291908290030181865afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610cb1565b600280546001600160a01b0319166001600160a01b039290921691909117905550565b6002546001600160a01b0316331461044f5760405162461bcd60e51b81526020600482015260086024820152672174726164696e6760c01b6044820152606401610229565b6001546040516356e8b9cd60e11b81526001600160a01b038481166004830152600092169063add1739a90602401602060405180830381865afa15801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be9190610cb1565b6001546040516327d442d560e11b81526001600160a01b03868116600483015292935060009290911690634fa885aa90602401602060405180830381865afa15801561050e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105329190610cb1565b6001546040516357a78bcb60e11b81526001600160a01b03878116600483015292935060009261271092879291169063af4f179690602401602060405180830381865afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610cce565b6105b59190610cfd565b6105bf9190610d1c565b90506105cc85848361086c565b60405163e38a195b60e01b8152600481018290526001600160a01b0384169063e38a195b90602401600060405180830381600087803b15801561060e57600080fd5b505af1158015610622573d6000803e3d6000fd5b5050600154604051630bba0caf60e31b81526001600160a01b03898116600483015260009450612710935088921690635dd0657890602401602060405180830381865afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190610cce565b6106a59190610cfd565b6106af9190610d1c565b90506106bc86848361086c565b60405163e38a195b60e01b8152600481018290526001600160a01b0384169063e38a195b90602401600060405180830381600087803b1580156106fe57600080fd5b505af1158015610712573d6000803e3d6000fd5b50505050505050505050565b6000546001600160a01b031633146107485760405162461bcd60e51b815260040161022990610c91565b6102b983838361086c565b804710156107a35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610229565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146107f0576040519150601f19603f3d011682016040523d82523d6000602084013e6107f5565b606091505b50509050806102b95760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610229565b80158061088057506001600160a01b038216155b1561088a57505050565b60015460405163067aa55560e51b81526001600160a01b038581166004830152600092169063cf54aaa090602401602060405180830381865afa1580156108d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f99190610d3e565b60ff169050670de0b6b3a764000061091282600a610e47565b61091c9084610cfd565b6109269190610d1c565b91506001600160a01b03841661094e576109496001600160a01b03841683610753565b610962565b6109626001600160a01b0385168484610968565b50505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526102b9928692916000916109f8918516908490610a75565b8051909150156102b95780806020019051810190610a169190610e53565b6102b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610229565b6060610a848484600085610a8e565b90505b9392505050565b606082471015610aef5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610229565b843b610b3d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610229565b600080866001600160a01b03168587604051610b599190610ea1565b60006040518083038185875af1925050503d8060008114610b96576040519150601f19603f3d011682016040523d82523d6000602084013e610b9b565b606091505b5091509150610bab828286610bb6565b979650505050505050565b60608315610bc5575081610a87565b825115610bd55782518084602001fd5b8160405162461bcd60e51b81526004016102299190610ebd565b6001600160a01b0381168114610c0457600080fd5b50565b600060208284031215610c1957600080fd5b8135610a8781610bef565b60008060408385031215610c3757600080fd5b8235610c4281610bef565b946020939093013593505050565b600080600060608486031215610c6557600080fd5b8335610c7081610bef565b92506020840135610c8081610bef565b929592945050506040919091013590565b60208082526006908201526510b7bbb732b960d11b604082015260600190565b600060208284031215610cc357600080fd5b8151610a8781610bef565b600060208284031215610ce057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610d1757610d17610ce7565b500290565b600082610d3957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d5057600080fd5b815160ff81168114610a8757600080fd5b600181815b80851115610d9c578160001904821115610d8257610d82610ce7565b80851615610d8f57918102915b93841c9390800290610d66565b509250929050565b600082610db357506001610e41565b81610dc057506000610e41565b8160018114610dd65760028114610de057610dfc565b6001915050610e41565b60ff841115610df157610df1610ce7565b50506001821b610e41565b5060208310610133831016604e8410600b8410161715610e1f575081810a610e41565b610e298383610d61565b8060001904821115610e3d57610e3d610ce7565b0290505b92915050565b6000610a878383610da4565b600060208284031215610e6557600080fd5b81518015158114610a8757600080fd5b60005b83811015610e90578181015183820152602001610e78565b838111156109625750506000910152565b60008251610eb3818460208701610e75565b9190910192915050565b6020815260008251806020840152610edc816040850160208701610e75565b601f01601f1916919091016040019291505056fea2646970667358221220b4deeeb2261920a227e74d6f66b2aba9f170bb2efac9477fb842f00e949f17e864736f6c634300080c0033";

type TreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Treasury__factory extends ContractFactory {
  constructor(...args: TreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Treasury> {
    return super.deploy(overrides || {}) as Promise<Treasury>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Treasury {
    return super.attach(address) as Treasury;
  }
  override connect(signer: Signer): Treasury__factory {
    return super.connect(signer) as Treasury__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryInterface {
    return new utils.Interface(_abi) as TreasuryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Treasury {
    return new Contract(address, _abi, signerOrProvider) as Treasury;
  }
}
