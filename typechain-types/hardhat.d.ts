/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IStrategyV7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategyV7__factory>;
    getContractFactory(
      name: "ICapPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICapPool__factory>;
    getContractFactory(
      name: "ICapRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICapRewards__factory>;
    getContractFactory(
      name: "IFeeConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeConfig__factory>;
    getContractFactory(
      name: "IKyberElastic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKyberElastic__factory>;
    getContractFactory(
      name: "IUniswapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouter__factory>;
    getContractFactory(
      name: "IUniswapRouterAVAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterAVAX__factory>;
    getContractFactory(
      name: "IUniswapRouterBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterBNB__factory>;
    getContractFactory(
      name: "IUniswapRouterETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterETH__factory>;
    getContractFactory(
      name: "IUniswapRouterMATIC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterMATIC__factory>;
    getContractFactory(
      name: "IUniswapRouterV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterV3__factory>;
    getContractFactory(
      name: "IUniswapRouterV3WithDeadline",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapRouterV3WithDeadline__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IBeefyVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeefyVault__factory>;
    getContractFactory(
      name: "IFeeStakedOLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeStakedOLP__factory>;
    getContractFactory(
      name: "IGLPManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGLPManager__factory>;
    getContractFactory(
      name: "IGMXRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMXRouter__factory>;
    getContractFactory(
      name: "IGMXStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMXStrategy__factory>;
    getContractFactory(
      name: "IGMXTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMXTracker__factory>;
    getContractFactory(
      name: "IGMXVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMXVault__factory>;
    getContractFactory(
      name: "GMDstaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GMDstaking__factory>;
    getContractFactory(
      name: "CapPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CapPoolMock__factory>;
    getContractFactory(
      name: "CapRewardsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CapRewardsMock__factory>;
    getContractFactory(
      name: "GMXRouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GMXRouterMock__factory>;
    getContractFactory(
      name: "TokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenMock__factory>;
    getContractFactory(
      name: "UniswapV2RouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2RouterMock__factory>;
    getContractFactory(
      name: "UniswapV3RouterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3RouterMock__factory>;
    getContractFactory(
      name: "CapSingleStakeStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CapSingleStakeStrategy__factory>;
    getContractFactory(
      name: "CapSingleStakeStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CapSingleStakeStrategy__factory>;
    getContractFactory(
      name: "StrategyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyManager__factory>;
    getContractFactory(
      name: "StratFeeManagerInitializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StratFeeManagerInitializable__factory>;
    getContractFactory(
      name: "StrategyGLP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyGLP__factory>;
    getContractFactory(
      name: "StrategyGMX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyGMX__factory>;
    getContractFactory(
      name: "StrategyGMXUniV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyGMXUniV2__factory>;
    getContractFactory(
      name: "StrategyGMXUniV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyGMXUniV3__factory>;
    getContractFactory(
      name: "GMD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GMD__factory>;
    getContractFactory(
      name: "GasFeeThrottler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasFeeThrottler__factory>;
    getContractFactory(
      name: "IGasPrice",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasPrice__factory>;
    getContractFactory(
      name: "BeefyVaultV7",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeefyVaultV7__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IStrategyV7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategyV7>;
    getContractAt(
      name: "ICapPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICapPool>;
    getContractAt(
      name: "ICapRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICapRewards>;
    getContractAt(
      name: "IFeeConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeConfig>;
    getContractAt(
      name: "IKyberElastic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IKyberElastic>;
    getContractAt(
      name: "IUniswapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouter>;
    getContractAt(
      name: "IUniswapRouterAVAX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterAVAX>;
    getContractAt(
      name: "IUniswapRouterBNB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterBNB>;
    getContractAt(
      name: "IUniswapRouterETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterETH>;
    getContractAt(
      name: "IUniswapRouterMATIC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterMATIC>;
    getContractAt(
      name: "IUniswapRouterV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterV3>;
    getContractAt(
      name: "IUniswapRouterV3WithDeadline",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapRouterV3WithDeadline>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IBeefyVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeefyVault>;
    getContractAt(
      name: "IFeeStakedOLP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeStakedOLP>;
    getContractAt(
      name: "IGLPManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGLPManager>;
    getContractAt(
      name: "IGMXRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMXRouter>;
    getContractAt(
      name: "IGMXStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMXStrategy>;
    getContractAt(
      name: "IGMXTracker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMXTracker>;
    getContractAt(
      name: "IGMXVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMXVault>;
    getContractAt(
      name: "GMDstaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GMDstaking>;
    getContractAt(
      name: "CapPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CapPoolMock>;
    getContractAt(
      name: "CapRewardsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CapRewardsMock>;
    getContractAt(
      name: "GMXRouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GMXRouterMock>;
    getContractAt(
      name: "TokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenMock>;
    getContractAt(
      name: "UniswapV2RouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2RouterMock>;
    getContractAt(
      name: "UniswapV3RouterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3RouterMock>;
    getContractAt(
      name: "CapSingleStakeStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CapSingleStakeStrategy>;
    getContractAt(
      name: "CapSingleStakeStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CapSingleStakeStrategy>;
    getContractAt(
      name: "StrategyManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyManager>;
    getContractAt(
      name: "StratFeeManagerInitializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StratFeeManagerInitializable>;
    getContractAt(
      name: "StrategyGLP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyGLP>;
    getContractAt(
      name: "StrategyGMX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyGMX>;
    getContractAt(
      name: "StrategyGMXUniV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyGMXUniV2>;
    getContractAt(
      name: "StrategyGMXUniV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StrategyGMXUniV3>;
    getContractAt(
      name: "GMD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GMD>;
    getContractAt(
      name: "GasFeeThrottler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasFeeThrottler>;
    getContractAt(
      name: "IGasPrice",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasPrice>;
    getContractAt(
      name: "BeefyVaultV7",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeefyVaultV7>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
